{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 17: Quantum-Principal Component Analysis (PCA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The quantum circuits in this demonstration of quantum principal component analysis (PCA) is based on the contents of the paper [『量子コンピューティングにおける最適解の全量子探索』](https://confit.atlas.jp/guide/event/jsai2019/subject/2E1-J-1-02/advanced) presented at Japanese Society for Artificial Intelligence (2019)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from renom_q import *\n",
    "from renom_q.ml.qpca import QPCA\n",
    "from sklearn.datasets import load_digits\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import rc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Perform principal component analysis of image data etc using Variational Quantum Eigensolver (VQE). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The code of Quantum-Principal Component Analysis (PCA)  \n",
    " https://github.com/ReNom-dev-team/ReNomQ/blob/release/0.2/renom_q/ml/qpca.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "images = load_digits()\n",
    "mnist_image = images.images[4]\n",
    "\n",
    "mnist_image = mnist_image/255\n",
    "\n",
    "plt.imshow(mnist_image)\n",
    "plt.colorbar()\n",
    "plt.tick_params(bottom=False, left=False)\n",
    "plt.tick_params(labelbottom=False, labelleft=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Perform principal component analysis of data in `QPCA.fit(image, method)`. If the optimization method is `method = 'Nelder-Mead'`, it can be calculated by Nelder-Mead method, and if it is `method = 'QPSO'`, it can be calculated by Quantum-Particle Swarm Optimization Method (QPSO).\n",
    "`n_components` is the number of components to be calculated. If not specified, it is the number of data dimensions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In the case of using Nelder-Mead method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The argument `steps` of `QPCA.fit` is the number of optimal solution searches in the Nelder-Mead method. If not specified, the number of optimal solution searches is `steps=50`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_components = 6\n",
    "qpca = QPCA(n_components=n_components)\n",
    "qpca.fit(mnist_image, method='Nelder-Mead', steps=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`QPCA.eigenvalue` represents an eigenvalue of the principal component, and `QPCA.components_` represents an eigenvector of the principal component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0011414835656115532, 0.0005486312376848744, 0.00021361594907473054, 0.0008252746887377631, 7.069545426676544e-05, 7.058857197168542e-05]\n",
      "\n",
      "[[ 1.03931789e-01  8.39520246e-02  7.56119539e-01  6.10763718e-01\n",
      "   2.03681423e-02  1.66937058e-02  1.48181326e-01  1.21449243e-01]\n",
      " [-1.47615405e-01  2.30607933e-01  2.69956410e-02 -4.21731659e-02\n",
      "   5.57804430e-01  7.62575757e-01 -1.02010276e-01 -1.39458489e-01]\n",
      " [-7.36502471e-02  9.62863778e-02  6.03060795e-01 -7.88409296e-01\n",
      "  -2.38820096e-04 -6.54546172e-04  1.95549971e-03  5.35953577e-03]\n",
      " [ 4.98651935e-06  1.70678506e-05 -1.54928446e-06 -5.30288843e-06\n",
      "  -7.81297596e-01  5.49127393e-01  2.42744917e-01 -1.70610896e-01]\n",
      " [ 5.03525611e-01 -4.74067969e-01 -1.07386090e-01  1.01103706e-01\n",
      "   6.89484063e-01  5.31844555e-02 -1.47045147e-01 -1.13425625e-02]\n",
      " [ 1.01619005e-01  1.90634197e-01 -3.98391865e-01 -7.47371157e-01\n",
      "  -1.15137693e-01 -3.41060057e-02  4.51391159e-01  1.33710769e-01]]\n"
     ]
    }
   ],
   "source": [
    "print(qpca.eigenvalue)\n",
    "print()\n",
    "print(qpca.components_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num = n_components\n",
    "\n",
    "size = int(np.log2(mnist_image.shape[0]))\n",
    "eigenvector_image = []\n",
    "eigenvector_sum_image = [np.zeros((2**size, 2**size)) for i in range(num)]\n",
    "\n",
    "for i in range(num):\n",
    "    vec = np.outer(qpca.components_[i], qpca.components_[i])\n",
    "    array = np.dot(mnist_image, vec)\n",
    "    eigenvector_image.append(array)\n",
    "    for j in range(num-i):\n",
    "        eigenvector_sum_image[num-1-j] += array\n",
    "    \n",
    "rc('text', usetex=True)\n",
    "title = []\n",
    "for i in range(num):\n",
    "    title.append(r'$H \\left| v_'+str(i)+r' \\right\\rangle \\left\\langle v_'+str(i)+r' \\right|$')\n",
    "title.append(r'$H \\left| v_0 \\right\\rangle \\left\\langle v_0 \\right|$')\n",
    "for i in range(num-1):\n",
    "    title.append(r'$\\displaystyle \\sum^'+str(i+1)+r'_{j=0} H \\left| v_j \\right\\rangle \\left\\langle v_j \\right|$')\n",
    "\n",
    "fig = plt.figure(figsize=(13,13))\n",
    "\n",
    "for i in range(2*num):\n",
    "    plt.subplot(2, num, i+1)\n",
    "    if i < num:\n",
    "        plt.imshow(eigenvector_image[i])\n",
    "    else:\n",
    "        plt.imshow(eigenvector_sum_image[i-num])\n",
    "    plt.title(title[i])\n",
    "    plt.tick_params(bottom=False, left=False)\n",
    "    plt.tick_params(labelbottom=False, labelleft=False)\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In the case of using QPSO method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The argument `n_particle` of `QPCA.fit` is the number of particles in QPSO method. If not specified, the number of particles is `n_particle=100`. The argument `steps` of `QPCA.fit` is the number of optimal solution searches in QPSO method. If not specified, the number of optimal solution searches is `steps=50`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_components = 6\n",
    "qpca = QPCA(n_components=n_components)\n",
    "qpca.fit(mnist_image, method='QPSO', n_particle=80, steps=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0011388180614500672, 0.0008219412048412808, 0.0005338874130360544, 0.00023315639679941764, 8.606813070738594e-05, 9.168607990025105e-05]\n",
      "\n",
      "[[-1.01252308e-01 -7.44616893e-02 -7.78910293e-01 -5.72816336e-01\n",
      "  -2.28349356e-02 -1.72969032e-02 -1.75663811e-01 -1.33061025e-01]\n",
      " [ 1.70635377e-03  5.65912945e-03 -5.69295201e-04 -1.88806992e-03\n",
      "   7.55392602e-01 -5.73746849e-01 -2.52023578e-01  1.91420638e-01]\n",
      " [ 7.89460249e-02  1.07988578e-01 -6.78985535e-03 -9.28769787e-03\n",
      "   5.28823011e-01  8.33732239e-01 -4.54821095e-02 -7.17062235e-02]\n",
      " [ 1.22178973e-01 -1.67872764e-01 -5.72448032e-01  7.86538235e-01\n",
      "  -2.12642247e-02  2.75042922e-03  9.96297753e-02 -1.28866511e-02]\n",
      " [ 4.01234374e-02 -6.99212969e-01  2.17896457e-02 -3.79718287e-01\n",
      "   5.11802191e-01 -1.40706753e-01  2.77942000e-01 -7.64129521e-02]\n",
      " [ 2.08882562e-02 -1.64159531e-02 -3.56754179e-01  2.80370932e-01\n",
      "   5.12711845e-02  9.05268601e-03 -8.75669522e-01 -1.54612407e-01]]\n"
     ]
    }
   ],
   "source": [
    "print(qpca.eigenvalue)\n",
    "print()\n",
    "print(qpca.components_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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oYACAABQQgEFAACghAIKAABACQUUAACAEgooAAAAJRRQAAAASiigAAAAlFBAAQAAKKGAAgAAUEIBBQAAoIQCCgAAQInWe5/8xK09GRGPXbnlsMu9vvd+QzbEnHEJ5owq6VkzZ0zAPo0K5owKE83ZVAUUAAAALpeX4AIAAFBCAQUAAKCEAgoAAEAJBRQAAIASCigAAAAlFFAAAABKKKAAAACUUEABAAAooYACAABQQgEFAACghAIKAABACQUUAACAEgooAAAAJRRQAAAASiigAAAAlFBAAQAAKKGAAgAAUEIBBQAAoIQCCgAAQAkFFAAAgBIKKAAAACUUUAAAAEoooAAAAJRQQAEAACihgAIAAFBCAQUAAKCEAgoAAEAJBRQAAIASCigAAAAlFFAAAABKKKAAAACUUEABAAAooYACAABQQgEFAACghAIKAABACQUUAACAEgooAAAAJRRQAAAASiigAAAAlFBAAQAAKKGAAgAAUEIBBQAAoIQCCgAAQAkFFAAAgBIKKAAAACUUUAAAAEoooAAAAJRQQAEAACihgAIAAFBCAQUAAKCEAgoAAEAJBRQAAIASCigAAAAlFFAAAABKKKAAAACUUEABAAAooYACAABQQgEFAACghAIKAABACQUUAACAEgooAAAAJRRQAAAASiigAAAAlFBAAQAAKKGAAgAAUEIBBQAAoIQCCgAAQAkFFAAAgBIKKAAAACUUUAAAAEoooAAAAJRQQAEAACihgAIAAFBCAQUAAKCEAgoAAEAJBRQAAIASCigAAAAlFFAAAABKKKAAAACUUEABAAAooYACAABQQgEFAACghAIKAABACQUUAACAEgooAAAAJRRQAAAASiigAAAAlFBAAQAAKKGAAgAAUEIBBQAAoIQCCgAAQAkFFAAAgBIKKAAAACUUUAAAAEoooAAAAJRQQAEAACihgAIAAFBCAQUAAKCEAgoAAEAJBRQAAIASCigAAAAlFFAAAABKKKAAAACUUEABAAAooYACAABQQgEFAACghAIKAABACQUUAACAEgooAAAAJRRQAAAASiigAAAAlFBAAQAAKKGAAgAAUEIBBQAAoIQCCgAAQAkFFAAAgBIKKAAAACUUUAAAAEoooAAAAJRQQAEAACihgAIAAFBCAQUAAKCEAgoAAEAJBRQAAIASCigAAAAlFFAAAABKKKAAAACUUEAB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\n",
      "text/plain": [
       "<Figure size 936x936 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num = n_components\n",
    "\n",
    "size = int(np.log2(mnist_image.shape[0]))\n",
    "eigenvector_image = []\n",
    "eigenvector_sum_image = [np.zeros((2**size, 2**size)) for i in range(num)]\n",
    "\n",
    "for i in range(num):\n",
    "    vec = np.outer(qpca.components_[i], qpca.components_[i])\n",
    "    array = np.dot(mnist_image, vec)\n",
    "    eigenvector_image.append(array)\n",
    "    for j in range(num-i):\n",
    "        eigenvector_sum_image[num-1-j] += array\n",
    "    \n",
    "rc('text', usetex=True)\n",
    "title = []\n",
    "for i in range(num):\n",
    "    title.append(r'$H \\left| v_'+str(i)+r' \\right\\rangle \\left\\langle v_'+str(i)+r' \\right|$')\n",
    "title.append(r'$H \\left| v_0 \\right\\rangle \\left\\langle v_0 \\right|$')\n",
    "for i in range(num-1):\n",
    "    title.append(r'$\\displaystyle \\sum^'+str(i+1)+r'_{j=0} H \\left| v_j \\right\\rangle \\left\\langle v_j \\right|$')\n",
    "\n",
    "fig = plt.figure(figsize=(13,13))\n",
    "\n",
    "for i in range(2*num):\n",
    "    plt.subplot(2, num, i+1)\n",
    "    if i < num:\n",
    "        plt.imshow(eigenvector_image[i])\n",
    "    else:\n",
    "        plt.imshow(eigenvector_sum_image[i-num])\n",
    "    plt.title(title[i])\n",
    "    plt.tick_params(bottom=False, left=False)\n",
    "    plt.tick_params(labelbottom=False, labelleft=False)\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`QPCA.mean_` represents the mean of the data, and `QPCA.get_covariance()` represents the covariance matrix of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.         0.00441176 0.01911765 0.03284314 0.03382353 0.02794118\n",
      " 0.00833333 0.        ]\n",
      "\n",
      "[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]\n",
      " [ 0.00000000e+00  6.78310540e-05  2.11182512e-04  8.48574724e-05\n",
      "  -5.62970286e-05  1.75481957e-04  3.26797386e-05  0.00000000e+00]\n",
      " [ 0.00000000e+00  2.11182512e-04  7.48887790e-04  4.20442687e-04\n",
      "  -2.97413083e-04  6.22013511e-04  1.89212940e-04  0.00000000e+00]\n",
      " [ 0.00000000e+00  8.48574724e-05  4.20442687e-04  5.53358598e-04\n",
      "  -3.24875048e-04  3.02356237e-04  1.74932718e-04  0.00000000e+00]\n",
      " [ 0.00000000e+00 -5.62970286e-05 -2.97413083e-04 -3.24875048e-04\n",
      "   6.06085571e-04 -1.26599659e-04 -2.67204921e-04  0.00000000e+00]\n",
      " [ 0.00000000e+00  1.75481957e-04  6.22013511e-04  3.02356237e-04\n",
      "  -1.26599659e-04  6.74191245e-04  1.46921514e-04  0.00000000e+00]\n",
      " [ 0.00000000e+00  3.26797386e-05  1.89212940e-04  1.74932718e-04\n",
      "  -2.67204921e-04  1.46921514e-04  1.51315428e-04  0.00000000e+00]\n",
      " [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]]\n"
     ]
    }
   ],
   "source": [
    "print(qpca.mean_)\n",
    "print()\n",
    "print(qpca.get_covariance())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
