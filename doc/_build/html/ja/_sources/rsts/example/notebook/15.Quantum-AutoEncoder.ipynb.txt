{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 15: Quantum-AutoEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This demonstration of quantum autoencoder is based on the contents of the paper [\"Development of convolution filter embedded quantum autoencoder by quantum simulator\"](https://confit.atlas.jp/guide/event/jsai2019/subject/2E1-J-1-01/advanced) presented at Japanese Society for Artificial Intelligence (2019)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from renom_q import *\n",
    "from renom_q.ml.qae import QAE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the adiabatic quantum computation with Ising model to perform noise removal with the auto-encoder."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " - The code of Quantum-AutoEncoder  \n",
    "https://github.com/ReNom-dev-team/ReNomQ/blob/release/0.2/renom_q/ml/qae.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the input image with `QAE.original(number)`. The image is a square whose side is the number specified by `number`. The minimum size is 3$\\times$3 images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "qae = QAE()\n",
    "qae.original(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By displaying `QAE.original_state`, it is possible to confirm the Ising spin state in the input image. Also, show the input image with `QAE.draw_image(QAE.original_state)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 1 1 1 1 1 1 1]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQsAAAD5CAYAAAAweBD0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAA75JREFUeJzt1zFqHEEURdGeRrkiw2TehBbQS69tKHRsTTZxtzOjSHMRDNU25+QFjx9cqMtxHAvAI+vsAcC/QSyARCyARCyARCyARCyARCyARCyARCyARCyA5GX2gM9eX1+P6/U6e8Zp7fu+rKu+f8WNvna73ZaPj4/Ld96eKhbX63V5f3+fPeO0xhjLtm2zZ5yaG33t7e3t228lGEjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkheZg/4bN/3ZYwxe8Zp3e9393nAjZ7nVLFY13XZtm32jNMaY7jPA270PL4hQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQPIye8Bn+74vY4zZM07rfr+7zwNu9DynisW6rsu2bbNnnNYYw30ecKPn8Q0BErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAkstxHLM3/HW5XH4vy/Jr9g74j/08juPHdx6eKhbAefmGAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAMkfERpS0nXicsgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(qae.original_state)\n",
    "qae.draw_image(qae.original_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At `QAE.add_noise(noise_rate)`, noise is mixed into the input image. `noise_rate` can specify the noise rate. It will be 0.1 if not specified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "qae.add_noise(0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By displaying `QAE.noise_state`, it is possible to confirm the Ising spin state in the noise mixed image. Also, show the noise mixed image with `QAE.draw_image(QAE.noise_state)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1 -1  1  1  1  1  1  1  1]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQsAAAD5CAYAAAAweBD0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAA9pJREFUeJzt1zFqI0kAhtFSY4MSg5PJDHMIX0AH9J3UV9l47awzg2uzxYnRh8F0z/AeVNjwU6BP1GnOOQBuWfYeAPwZxAJIxAJIxAJIxAJIxAJIxAJIxAJIxAJIxAJI7vYe8NnDw8N8fHzce8Zh3d/fj/f3971nHNr5fB7L4j/wK29vb+P19fX0rY/nnIc5T09Pc4zhfHFeXl5233D0c71eJ197fn6e85u/TwkGErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAkru9B3x2Pp/H9Xrde8Zhbdvmfm7Ytm2s67r3jL/SoWKxLMu4XC57zzisdV3dzw3u6Od4hgCJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWACJWADJ3d4DPvv4+Bjruu4947C2bXM/N7ijn3OoWCzLMi6Xy94zDmtdV/dzgzv6OZ4hQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQHKac+694X+n0+nfMcY/e++Av9jvOeev73x4qFgAx+UZAiRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiAST/AavQiCGUtsDxAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(qae.noise_state)\n",
    "qae.draw_image(qae.noise_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Denoising from the noise mixed image by `QAE.decode()`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "qae.decode()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By displaying `QAE.decoded_state`, it is possible to confirm the Ising spin state in the image after denoising. Also, show the image after denoising with `QAE.draw_image(QAE.decoded_state)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 1 1 1 1 1 1 1]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQsAAAD5CAYAAAAweBD0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAA75JREFUeJzt1zFqHEEURdGeRrkiw2TehBbQS69tKHRsTTZxtzOjSHMRDNU25+QFjx9cqMtxHAvAI+vsAcC/QSyARCyARCyARCyARCyARCyARCyARCyARCyA5GX2gM9eX1+P6/U6e8Zp7fu+rKu+f8WNvna73ZaPj4/Ld96eKhbX63V5f3+fPeO0xhjLtm2zZ5yaG33t7e3t228lGEjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkjEAkheZg/4bN/3ZYwxe8Zp3e9393nAjZ7nVLFY13XZtm32jNMaY7jPA270PL4hQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQCIWQPIye8Bn+74vY4zZM07rfr+7zwNu9DynisW6rsu2bbNnnNYYw30ecKPn8Q0BErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAkstxHLM3/HW5XH4vy/Jr9g74j/08juPHdx6eKhbAefmGAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAIlYAMkfERpS0nXicsgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(qae.decoded_state)\n",
    "qae.draw_image(qae.decoded_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By displaying `QAE.result`, it is possible to see the calculation result and each parameter of adiabatic quantum calculation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'solution': array([1, 1, 1, 1, 1, 1, 1, 1, 1]), 'result': {'011000111': 6, '011101111': 3, '100111111': 1, '101111000': 5, '101111010': 1, '101111110': 4, '101111111': 1, '111101111': 15, '111110111': 24, '111111011': 13, '111111110': 20, '111111111': 931}, 'J': array([[ 0,  1, -1, -1,  0,  0,  1,  0,  0],\n",
      "       [ 1,  0, -1,  0,  1,  0,  0, -1,  0],\n",
      "       [-1, -1,  0,  0,  0, -1,  0,  0, -1],\n",
      "       [-1,  0,  0,  0, -1, -1, -1,  0,  0],\n",
      "       [ 0,  1,  0, -1,  0, -1,  0, -1,  0],\n",
      "       [ 0,  0, -1, -1, -1,  0,  0,  0,  1],\n",
      "       [ 1,  0,  0, -1,  0,  0,  0, -1, -1],\n",
      "       [ 0, -1,  0,  0, -1,  0, -1,  0, -1],\n",
      "       [ 0,  0, -1,  0,  0,  1, -1, -1,  0]]), 'hz': array([-1, -1, -1, -1, -1, -1, -1, -1, -1]), 'hx': 1, 'shots': 1024, 'qasm': None, 'noise rate': {'q0': 0.5, 'q1': 0.5, 'q2': 0.0, 'q3': 0.0, 'q4': 0.25, 'q5': 0.25, 'q6': 0.25, 'q7': 0.0, 'q8': 0.25}}\n"
     ]
    }
   ],
   "source": [
    "print(qae.result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is possible to add a pattern to the input image. In addition, input image can be specified by array type (The elements of the array can be specified only 0 or 1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQsAAAD5CAYAAAAweBD0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAABGFJREFUeJzt10GKG1cUQNEv0QNjMHiSWUMWoQ1oUV5Ge01dG/AiAp5lqlmDfmbBs1xa6pTycw78YcF7VaUr6jDnHAD/5Lj3AMB/g1gAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAydPeA/zqy5cv8+vXr3uPcXefPn0ax+OaXb5er0vu9vb2Nt7e3vYe4+5+/vw55pyHd10853yY8/z8PMcYy53X19e5qlV3e3l52f29+agz3/n7XO8vAfgQYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkDxWLz58/jznncufHjx/jcDgseVZ1Op12f28+4pxOp3ffk6c73t+bXa/XsW3b3mPc3fPz83h5edl7jA9xuVyWfGar7nWLh4rF8Xgc5/N57zHu7vv37+Pbt297j/EhXl9fl3xm27YtudctHuozBHhcYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYvEvOJ1OY8655OH/42nvAX51vV7Htm17j3F3l8tlyb3GWHe3Vfe6xUPF4ng8jvP5vPcYd7dt25J7jbHubqvudQufIUAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkAiFkDytPcAv7per2Pbtr3HuLvL5bLkXmOsu9uqe93ioWJxPB7H+Xzee4y727Ztyb3GWHe3Vfe6hc8QIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIDnMOfee4W+Hw+HPMcYfe88BC/t9zvnbey58qFgAj8tnCJCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZCIBZD8Bct3DOzW9BnwAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "qae.original(4, [0, 3, 5])     #mark q0, q3 and q5\n",
    "qae.draw_image(qae.original_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQsAAAD5CAYAAAAweBD0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAABLhJREFUeJzt1zGKI0kChtGopspua6CNhPV0AV0z7iRdZezt9uQVZKy3lDef5GTl8B6EKfgJQh/k21prAPyTH0cPAM5BLIBELIBELIBELIBELIBELIBELIBELIBELIDk/egBX/38+XP9+vXr6BnJvu/jx4/ztPbz83N8fn4ePSP5+PgYHx8fR8/IzvQW/vz5M37//v320o/XWt/mXC6XdRa32+3oCU+Zc64xxinOnPPo63rKmd7C9Xpd68X/5zlyCBxOLIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIDk/egBX+37Pu73+9EzksfjcZqtY4yxbduYcx49I9m27VR3e7a38LK11rc5l8tlncXtdjt6wlPmnGuMcYoz5zz6up5yprdwvV7XevH/6TMESMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSN6PHvDVvu/jfr8fPSN5PB6n2TrGGNu2jTnn0TOSbdtOdbdnewsvW2t9m3O5XNZZ3G63oyc8Zc65xhinOHPOo6/rKWd6C9frda0X/58+Q4BELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIDk/egBX+37Pu73+9EzksfjcZqtY4yxbduYcx49I9m27VR3e7a38LK11rc5l8tlncXtdjt6wlPmnGuMcYoz5zz6up5yprdwvV7XevH/6TMESMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSMQCSN6PHvDVvu/jfr8fPSN5PB6n2TrGGNu2jTnn0TOSbdtOdbdnewsvW2t9m3O5XNZZ3G63oyc8Zc65xhinOHPOo6/rKWd6C9frda0X/58+Q4BELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIBELIDkba119Ib/e3t7++8Y4++jd8C/2H/WWn+98sNvFQvg+/IZAiRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiASRiAST/Ax45pchu9LvFAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "qae.original(5, [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2]])     #Mark in the second column of each row\n",
    "qae.draw_image(qae.original_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQsAAAD5CAYAAAAweBD0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAA/xJREFUeJzt2LFKHFEUgOE7omAj2KRbCPgk+jy2+xjzTvoqge3Sio3FTRds4v4shJmE74NTDhwOzL/MLnPOAXDO1dYLAP8GsQASsQASsQASsQASsQASsQASsQASsQASsQCS660X+Ozu7m7e399vvcZu3dzcjI+Pj63X2DU3+trpdBpzzuWih+ecu5nD4TDHGOYPs67r5jvsfdzo/Fz6fvoMARKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxABKxAJLrrRf47Pb2dry8vGy9xm69vb25zxlu9LXj8Xjxs7uKxdXV1Xh8fNx6jd16fX11nzPc6O/xGQIkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEkYgEk11sv8Nn7+/tYlmXrNXZrXdfx9PS09Rq75kZ/zzLn3HqH3x4eHubz8/PWa+zW4XAYp9Np6zV2zY2+djwex5zzsl/kOedu5nA4zDGG+cOs67r5DnsfNzo/l76f/rMAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAErEAkmXOufUOvy3L8nOM8WPrPeA/9n3O+e2SB3cVC2C/fIYAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAiVgAyS+9tifORbZobgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "qae.original([[0, 0, 0], [1, 1, 1], [0, 0, 0]])     #array\n",
    "qae.draw_image(qae.original_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from keras.datasets import mnist \n",
    "\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "image = x_train[0]/255\n",
    "\n",
    "for i in range(image.shape[0]):\n",
    "    for j in range(image.shape[1]):\n",
    "        if image[i, j] >= 0.5:\n",
    "            image[i, j] = 1\n",
    "        else:\n",
    "            image[i, j] = 0\n",
    "\n",
    "qae.original(image)     #array\n",
    "qae.draw_image(qae.original_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When drawing a quantum circuit, if you first set as `QAE(set_qasm=True)`, qasm code is added to `QAE.result`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
